import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";
import {
  useAccount,
  useContractRead,
  useContractWrite,
  useNetwork,
} from "wagmi";
import { usePrepareContractWrite } from "wagmi";
import { ethers } from "ethers";

const Home: NextPage = () => {
  const [luckyNumber, setLuckyNumber] = useState(
    Math.floor(Math.random() * 1000)
  );

  const { chain } = useNetwork();

  const account = useAccount();

  const marketInfo =
    chain && chain.id === 13370
      ? require(`../deployments/${chain.id}/NumberGuessingGame.json`)
      : {};
  const usdTokenInfo =
    chain && chain.id === 13370
      ? require(`../deployments/${chain.id}/synthetix/USDProxy.json`)
      : {};
  const linkTokenInfo =
    chain && chain.id === 13370
      ? require(`../deployments/${chain.id}/vrf/linkAggregator/linkToken/Token.json`)
      : {};

  const usdAllowance = useContractRead({
    address: usdTokenInfo.address,
    abi: usdTokenInfo.abi,
    functionName: "allowance",
    args: [account.address, marketInfo.address],
  });

  const usdBalance = useContractRead({
    address: usdTokenInfo.address,
    abi: usdTokenInfo.abi,
    functionName: "balanceOf",
    args: [account.address],
  });

  const linkAllowance = useContractRead({
    address: linkTokenInfo.address,
    abi: linkTokenInfo.abi,
    functionName: "allowance",
    args: [account.address, marketInfo.address],
  });

  const linkBalance = useContractRead({
    address: linkTokenInfo.address,
    abi: linkTokenInfo.abi,
    functionName: "balanceOf",
    args: [account.address],
  });

  const approveUsdPrepare = usePrepareContractWrite({
    address: usdTokenInfo.address,
    abi: usdTokenInfo.abi,
    functionName: "approve",
    args: [marketInfo.address, ethers.constants.MaxUint256],
  });

  const approveLinkPrepare = usePrepareContractWrite({
    address: linkTokenInfo.address,
    abi: linkTokenInfo.abi,
    functionName: "approve",
    args: [marketInfo.address, ethers.constants.MaxUint256],
  });

  const buyTicketPrepare = usePrepareContractWrite({
    address: marketInfo.address,
    abi: marketInfo.abi,
    functionName: "buy",
    args: [account.address, luckyNumber],
  });

  const drawPrepare = usePrepareContractWrite({
    address: marketInfo.address,
    abi: marketInfo.abi,
    functionName: "startDraw",
    args: [ethers.utils.parseEther("100").toString()],
  });

  const approveUsdTxn = useContractWrite(approveUsdPrepare.config);
  const approveLinkTxn = useContractWrite(approveLinkPrepare.config);
  const buyTicketTxn = useContractWrite(buyTicketPrepare.config);
  const drawTxn = useContractWrite(drawPrepare.config);

  useEffect(() => {
    if (account.isConnected) {
      usdAllowance.refetch();
      approveUsdPrepare.refetch();
      buyTicketPrepare.refetch();
    }
  }, [marketInfo, account.address]);

  useEffect(() => {
    usdAllowance.refetch();
    usdBalance.refetch();
    buyTicketTxn.reset();
  }, [buyTicketTxn.data]);

  console.log(usdAllowance);

  return (
    <div className={styles.container}>
      <Head>
        <title>Number Guessing Game</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>Welcome to the Number Guessing Game!</h1>

        {usdBalance.data && (
          <div>
            USD Balance: {ethers.utils.formatEther(usdBalance.data as any)}
          </div>
        )}
        {linkBalance.data && (
          <div>
            LINK Balance: {ethers.utils.formatEther(linkBalance.data as any)}
          </div>
        )}

        <input
          type="number"
          value={luckyNumber}
          onChange={(ev) => setLuckyNumber(parseInt(ev.target.value))}
        />

        {usdAllowance.data && (usdAllowance.data as any).eq(0) && (
          <button
            disabled={!approveUsdTxn.write}
            onClick={() => approveUsdTxn.write!()}
          >
            Approve USD Spend
          </button>
        )}
        {usdAllowance.data && !(usdAllowance.data as any).eq(0) && (
          <button
            disabled={!buyTicketTxn.write}
            onClick={() => buyTicketTxn.write!()}
          >
            Buy Ticket
          </button>
        )}

        {usdAllowance.data &&
          !(usdAllowance.data as any).eq(0) &&
          buyTicketPrepare.isError && (
            <div>Error: {buyTicketPrepare.error!.message}</div>
          )}

        {linkAllowance.data && (linkAllowance.data as any).eq(0) && (
          <button
            disabled={!approveLinkTxn.write}
            onClick={() => approveLinkTxn.write!()}
          >
            Approve LINK
          </button>
        )}
        {linkAllowance.data && !(linkAllowance.data as any).eq(0) && (
          <button
            disabled={!buyTicketTxn.write}
            onClick={() => drawTxn.write!()}
          >
            Draw
          </button>
        )}

        {linkAllowance.data &&
          !(linkAllowance.data as any).eq(0) &&
          drawPrepare.isError && <div>Error: {drawPrepare.error!.message}</div>}
      </main>
    </div>
  );
};

export default Home;
