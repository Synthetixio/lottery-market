import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import {
  useAccount,
  useContractRead,
  useContractWrite,
  useSigner,
} from 'wagmi';
import { usePrepareContractWrite } from 'wagmi';
import { Contract, ethers } from 'ethers';
import lotteryMarketInfo from '../../deployments/LotteryMarket.json';
import usdTokenInfo from '../../deployments/sandbox/synthetix/USDProxy.json';
import linkTokenInfo from '../../deployments/vrf/linkAggregator/linkToken/Token.json';
import Header from '../components/Header';

const Home: NextPage = () => {
  const [luckyNumber, setLuckyNumber] = useState(
    Math.floor(Math.random() * 1000)
  );

  const account = useAccount();
  const signer = useSigner();

  const usdAllowance = useContractRead({
    address: usdTokenInfo.address as any,
    abi: usdTokenInfo.abi,
    functionName: 'allowance',
    args: [account.address, lotteryMarketInfo.address],
  });

  const usdBalance = useContractRead({
    address: usdTokenInfo.address as any,
    abi: usdTokenInfo.abi,
    functionName: 'balanceOf',
    args: [account.address],
  });

  const linkAllowance = useContractRead({
    address: linkTokenInfo.address as any,
    abi: linkTokenInfo.abi,
    functionName: 'allowance',
    args: [account.address, lotteryMarketInfo.address],
  });

  const linkBalance = useContractRead({
    address: linkTokenInfo.address as any,
    abi: linkTokenInfo.abi,
    functionName: 'balanceOf',
    args: [account.address],
  });

  const approveUsdPrepare = usePrepareContractWrite({
    address: usdTokenInfo.address as any,
    abi: usdTokenInfo.abi,
    functionName: 'approve',
    args: [lotteryMarketInfo.address, ethers.constants.MaxUint256],
  });

  const approveLinkPrepare = usePrepareContractWrite({
    address: linkTokenInfo.address as any,
    abi: linkTokenInfo.abi,
    functionName: 'approve',
    args: [lotteryMarketInfo.address, ethers.constants.MaxUint256],
  });

  const buyTicketPrepare = usePrepareContractWrite({
    address: lotteryMarketInfo.address as any,
    abi: lotteryMarketInfo.abi,
    functionName: 'buy',
    args: [account.address, luckyNumber],
  });

  const drawPrepare = usePrepareContractWrite({
    address: lotteryMarketInfo.address as any,
    abi: lotteryMarketInfo.abi,
    functionName: 'startDraw',
    args: [ethers.utils.parseEther('100').toString()],
  });

  const jackpotValue = useContractRead({
    address: lotteryMarketInfo.address as any,
    abi: lotteryMarketInfo.abi,
    functionName: 'jackpot',
  });

  const ticketCost = useContractRead({
    address: lotteryMarketInfo.address as any,
    abi: lotteryMarketInfo.abi,
    functionName: 'ticketCost',
  });

  const approveUsdTxn = useContractWrite(approveUsdPrepare.config);
  const approveLinkTxn = useContractWrite(approveLinkPrepare.config);
  const buyTicketTxn = useContractWrite(buyTicketPrepare.config);
  const drawTxn = useContractWrite(drawPrepare.config);

  useEffect(() => {
    if (account.isConnected) {
      usdAllowance.refetch();
      approveUsdPrepare.refetch();
      buyTicketPrepare.refetch();
    }
  }, [account.isConnected]);

  useEffect(() => {
    usdAllowance.refetch();
    usdBalance.refetch();
    buyTicketTxn.reset();
  }, [buyTicketTxn.data]);

  return (
    <div>
      <Head>
        <title>Lottery Market</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <Header />
      <main className="flex justify-center items-center flex-col gap-2">
        <h1>Welcome to the Lottery!</h1>

        {jackpotValue.data && (
          <h2>
            Current Jackpot value:{' '}
            {ethers.utils.formatEther(jackpotValue.data as any)} sUSD
          </h2>
        )}

        {usdBalance.data && (
          <div className="border-black border-[1px] border-solid rounded p-2">
            USD Balance: {ethers.utils.formatEther(usdBalance.data as any)}
          </div>
        )}
        {usdAllowance.data && (
          <div className="border-black border-[1px] border-solid rounded p-2">
            USD Allowance: {ethers.utils.formatEther(usdAllowance.data as any)}
          </div>
        )}
        {linkBalance.data && (
          <div className="border-black border-[1px] border-solid rounded p-2">
            LINK Balance: {ethers.utils.formatEther(linkBalance.data as any)}
          </div>
        )}
        {linkAllowance.data && (
          <div className="border-black border-[1px] border-solid rounded p-2">
            LINK Allowance:{' '}
            {ethers.utils.formatEther(linkAllowance.data as any)}
          </div>
        )}

        <input
          type="number"
          value={luckyNumber}
          onChange={(ev) => setLuckyNumber(parseInt(ev.target.value))}
          className="border-black border-[1px] border-solid rounded p-2"
        />

        {usdAllowance.data && (usdAllowance.data as any).eq(0) && (
          <button
            disabled={!approveUsdTxn.write}
            onClick={() => approveUsdTxn.write!()}
            className="bg-green-400 rounded p-2"
          >
            Approve USD Spend
          </button>
        )}
        {usdAllowance.data && !(usdAllowance.data as any).eq(0) && (
          <button
            onClick={() => {
              try {
                if (signer.data) {
                  new Contract(
                    lotteryMarketInfo.address,
                    lotteryMarketInfo.abi,
                    signer.data
                  ).buy(account.address, luckyNumber);
                }
              } catch (error) {
                console.log(buyTicketTxn, error);
              }
            }}
          >
            Buy Ticket
          </button>
        )}

        {/* {usdAllowance.data &&
          !(usdAllowance.data as any).eq(0) &&
          buyTicketPrepare.isError && (
            <div>Error: {buyTicketPrepare.error!.message}</div>
          )} */}

        {linkAllowance.data && (linkAllowance.data as any).eq(0) && (
          <button
            disabled={!approveLinkTxn.write}
            onClick={() => approveLinkTxn.write!()}
            className="bg-green-400 rounded p-2"
          >
            Approve LINK
          </button>
        )}
        {linkAllowance.data && !(linkAllowance.data as any).eq(0) && (
          <button
            onClick={() => {
              if (signer.data) {
                new Contract(
                  lotteryMarketInfo.address,
                  lotteryMarketInfo.abi,
                  signer.data
                ).startDraw(1000);
              }
            }}
          >
            Draw
          </button>
        )}

        {/* <div className="overflow-scroll">
          {linkAllowance.data &&
            !(linkAllowance.data as any).eq(0) &&
            drawPrepare.isError && (
              <div>Error: {drawPrepare.error!.message}</div>
            )}
        </div> */}
      </main>
    </div>
  );
};

export default Home;
